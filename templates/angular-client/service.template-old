{{>licenseInfo}}

import { Injectable } from '@angular/core'
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from '@angular/common/http'

import { Observable } from 'rxjs/Observable'

{{#imports}}
import { {{classname}} } from '../{{filename}}'
{{/imports}}

import { {{ clientName }}ClientConfig } from '../{{ clientNameLower }}-client.config'
import { CustomHttpUrlEncodingCodec, canConsumeForm } from '../util'

{{#operations}}
{{#description}}
/**
 * {{&description}}
 */
{{/description}}
@Injectable()
export class {{classname}} {
    defaultHeaders = new HttpHeaders()

    private basePath = '{{basePathWithoutHost}}'

    constructor(
        protected httpClient: HttpClient,
        private config: {{ clientName }}ClientConfig,
    ) {}

{{#operation}}
    /**
     * {{summary}}
     * {{notes}}
     {{#allParams}}* @param {{paramName}} {{description}}
     {{/allParams}}* @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param additionalParams object containing any additional query parameters
     * @param reportProgress flag to report request and response progress.
     * @param selectAccepts optional closure that receives all possible values for the accept header and should return the desired one
     * @param selectConsumes optional closure that receives all possible values for the content type header and should return the desired one
     */
    public {{operationId}}({{#allParams}}
        {{paramName}}{{^required}}?{{/required}}: {{{dataType}}},{{/allParams}}
        additionalParams?: { [name: string]: any },
        observe?: 'body',
        reportProgress?: boolean,
        selectAccept?: (accepts: string[]) => string,
        selectConsumes?: (consumes: string[]) => string,
    ): Observable<{{#returnType}}{{{returnType}}}{{#isResponseTypeFile}}|undefined{{/isResponseTypeFile}}{{/returnType}}{{^returnType}}any{{/returnType}}>
    public {{operationId}}({{#allParams}}
        {{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}
        additionalParams?: { [name: string]: any },
        observe?: 'response',
        reportProgress?: boolean,
        selectAccepts?: (accepts: string[]) => string,
        selectConsumes?: (consumes: string[]) => string,
    ): Observable<HttpResponse<{{#returnType}}{{{returnType}}}{{#isResponseTypeFile}}|undefined{{/isResponseTypeFile}}{{/returnType}}{{^returnType}}any{{/returnType}}>>
    public {{operationId}}({{#allParams}}
        {{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}
        additionalParams?: { [name: string]: any },
        observe?: 'events',
        reportProgress?: boolean,
        selectAccepts?: (accepts: string[]) => string,
        selectConsumes?: (consumes: string[]) => string,
    ): Observable<HttpEvent<{{#returnType}}{{{returnType}}}{{#isResponseTypeFile}}|undefined{{/isResponseTypeFile}}{{/returnType}}{{^returnType}}any{{/returnType}}>>
    public {{operationId}}({{#allParams}}
        {{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}
        additionalParams?: { [name: string]: any },
        observe: any = 'body',
        reportProgress: boolean = false,
        selectAccepts?: (accepts: string[]) => string,
        selectConsumes?: (consumes: string[]) => string,
    ): Observable<any> {
{{#allParams}}

{{#required}}
        if ({{paramName}} === null || {{paramName}} === undefined) {
            throw new Error('Required parameter {{paramName}} was null or undefined when calling {{operationId}}.')
        }
{{/required}}
{{/allParams}}

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()})

        if (additionalParams) {
            for (let param in additionalParams)
                queryParameters = queryParameters.append(param, additionalParams[param])
        }

{{#queryParams}}
        {{#isListContainer}}
        if ({{paramName}}) {
        {{#isCollectionFormatMulti}}
            {{paramName}}.forEach((element) => {
                queryParameters = queryParameters.append('{{baseName}}', <any>element)
            })
        {{/isCollectionFormatMulti}}
        {{^isCollectionFormatMulti}}
            queryParameters = queryParameters.set('{{baseName}}', {{paramName}}.join(COLLECTION_FORMATS['{{collectionFormat}}']))
        {{/isCollectionFormatMulti}}
        }
        {{/isListContainer}}
        {{^isListContainer}}
        if ({{paramName}} !== undefined) {
        {{#isDateTime}}
            queryParameters = queryParameters.set('{{baseName}}', <any>{{paramName}}.toISOString())
        {{/isDateTime}}
        {{^isDateTime}}
            queryParameters = queryParameters.set('{{baseName}}', <any>{{paramName}})
        {{/isDateTime}}
        }
        {{/isListContainer}}
{{/queryParams}}

        let headers = this.defaultHeaders
{{#headerParams}}
        {{#isListContainer}}
        if ({{paramName}}) {
            headers = headers.set('{{baseName}}', {{paramName}}.join(COLLECTION_FORMATS['{{collectionFormat}}']))
        }
        {{/isListContainer}}
        {{^isListContainer}}
        if ({{paramName}} !== undefined && {{paramName}} !== null) {
            headers = headers.set('{{baseName}}', String({{paramName}}))
        }
        {{/isListContainer}}
{{/headerParams}}

        // to determine the Accept header
        let accepts: string[] = [
            {{#produces}}
            '{{{mediaType}}}'{{#hasMore}},{{/hasMore}}
            {{/produces}}
        ]

        if (accepts.length > 0) {
            let selectedAcceptsHeader: string = selectAccepts
                ? selectAccepts(accepts)
                : accepts[0]
            headers = headers.set('Accept', selectedAcceptsHeader)
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            {{#consumes}}
            '{{{mediaType}}}'{{#hasMore}},{{/hasMore}}
            {{/consumes}}
        ]

{{#bodyParam}}
        if (consumes.length > 0) {
            let selectedConsumesHeader: string = selectConsumes
                ? selectConsumes(consumes)
                : consumes[0]
            headers = headers.set('Content-Type', selectedConsumesHeader)
        }
{{/bodyParam}}

{{#hasFormParams}}
        const consumesForm = canConsumeForm(consumes)

        let formParams: { append(param: string, value: any): void }
        let useForm = false
        let convertFormParamsToString = false
{{#formParams}}
{{#isFile}}
        // use FormData to transmit files using content-type 'multipart/form-data'
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = consumesForm
{{/isFile}}
{{/formParams}}
        if (useForm) { formParams = new FormData() }
        else { formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()}) }

{{#formParams}}
        {{#isListContainer}}
        if ({{paramName}}) {
        {{#isCollectionFormatMulti}}
            {{paramName}}.forEach((element) => {
                formParams = formParams.append('{{baseName}}', <any>element) || formParams
            })
        {{/isCollectionFormatMulti}}
        {{^isCollectionFormatMulti}}
            formParams = formParams.append('{{baseName}}', {{paramName}}.join(COLLECTION_FORMATS['{{collectionFormat}}'])) || formParams
        {{/isCollectionFormatMulti}}
        }
        {{/isListContainer}}
        {{^isListContainer}}
        if ({{paramName}} !== undefined) {
            formParams = formParams.append('{{baseName}}', <any>{{paramName}}) || formParams
        }
        {{/isListContainer}}
{{/formParams}}

{{/hasFormParams}}
        return this.httpClient.{{httpMethod}}{{^isResponseFile}}<{{#returnType}}{{{returnType}}}{{#isResponseTypeFile}}|undefined{{/isResponseTypeFile}}{{/returnType}}{{^returnType}}any{{/returnType}}>{{/isResponseFile}}(`${this.config.host}${this.basePath}{{{path}}}`,{{#isBodyAllowed}}
            {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}{{#hasFormParams}}convertFormParamsToString ? formParams.toString() : formParams{{/hasFormParams}}{{^hasFormParams}}null{{/hasFormParams}}{{/bodyParam}},{{/isBodyAllowed}}
            {
                params: queryParameters,
{{#isResponseFile}}
                responseType: 'blob',
{{/isResponseFile}}
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        )
    }

{{/operation}}}
{{/operations}}
